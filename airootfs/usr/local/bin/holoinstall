#!/bin/zsh
# HoloISO Installer v2
# This defines all of the current variables.
CMD_PACMAN_INSTALL=(/usr/bin/pacman --noconfirm -S --needed --overwrite="*")
CMD_PACMAN_UPDATE=(/usr/bin/pacman -Sy)
CPU_VENDOR=$(cat /proc/cpuinfo | grep 'vendor' | uniq | cut -c 13-)
SYSTEM_LOCALE="${SYSTEM_LOCALE:-en_US.UTF-8 UTF-8}"
HOLO_INSTALL_DIR="${HOLO_INSTALL_DIR:-/mnt}"

# Update system time
if [ $(timedatectl status | grep -c "NTP service: active") -ne 1 ]; then
	# If NTP is not active, enable it.
	timedatectl set-ntp true

	# Update the hardware clock.
	hwclock --systohc
fi


if [[ "${CPU_VENDOR}" == "AuthenticAMD" ]]; then
	UCODE_INSTALL_MSG="AMD CPU detected, installing AMD ucode..."
	UCODE_INSTALL="amd-ucode"
else
	UCODE_INSTALL_MSG="Intel CPU detected, installing Intel ucode..."
	UCODE_INSTALL="intel-ucode"
fi

mkentry() {
	TITLE="$1"
	if [ -n "$2" ]; then
		FLAVOR="-$2"
	fi

	echo "title $TITLE"
	echo "linux /vmlinuz-linux$FLAVOR"
	echo "initrd /$UCODE_INSTALL.img"
	echo "initrd /initramfs-linux$FLAVOR.img"
	echo "options root=PARTLABEL=rootfs rw quiet audit=0"
}

lsblk
read "?Enter your desired drive node here (for example, sda or nvme0n1): " DRIVEDEVICE
#read "?WARNING: This drive is going to be erased fully. Press enter to continue, or CTRL+Z to terminate"

DEVICE="/dev/${DRIVEDEVICE}"

INSTALLDEVICE="${DEVICE}"

if echo ${DEVICE} | grep -q -P "^/dev/(nvme|loop|mmcblk)"; then
	INSTALLDEVICE="${DEVICE}p"
fi

if [ ! -b $DEVICE ]; then
	echo "$DEVICE not found! Installation Aborted!"
	exit 1
fi

echo "\nCreating partitions..."
parted ${DEVICE} mklabel gpt
parted ${DEVICE} mkpart esp fat32 2M 256M

parted ${DEVICE} mkpart rootfs btrfs 256M 100%
parted ${DEVICE} set 1 boot on
parted ${DEVICE} set 1 esp on

mkfs -t vfat ${INSTALLDEVICE}1
mkfs -t btrfs -f ${INSTALLDEVICE}2

echo "\nPartitioning complete, mounting and pacstrapping..."
echo "${UCODE_INSTALL_MSG}"
mount -t btrfs -o subvol=/,compress-force=zstd:1,discard,noatime,nodiratime ${INSTALLDEVICE}2 ${HOLO_INSTALL_DIR}
mkdir -p ${HOLO_INSTALL_DIR}/boot/
mount -t vfat ${INSTALLDEVICE}1 ${HOLO_INSTALL_DIR}/boot/

pacstrap ${HOLO_INSTALL_DIR} base base-devel ${UCODE_INSTALL} linux linux-headers linux-mainline linux-mainline-headers linux-handheld linux-handheld-headers linux-firmware efibootmgr inetutils neofetch networkmanager sddm-wayland rinputer

echo "\nBase system installation done, generating fstab..."
genfstab -U -p ${HOLO_INSTALL_DIR} >> ${HOLO_INSTALL_DIR}/etc/fstab
cp /etc/pacman.conf ${HOLO_INSTALL_DIR}/etc/pacman.conf
cp /etc/pacman.d/mirrorlist ${HOLO_INSTALL_DIR}/etc/pacman.d/mirrorlist

HOLOHOSTNAME="holodevice"
HOLOUSER="deck"


arch-chroot ${HOLO_INSTALL_DIR} useradd --create-home ${HOLOUSER}

echo "${HOLOUSER} ALL=(root) NOPASSWD:ALL" > ${HOLO_INSTALL_DIR}/etc/sudoers.d/${HOLOUSER}
chmod 0440 ${HOLO_INSTALL_DIR}/etc/sudoers.d/${HOLOUSER}

echo ${HOLOHOSTNAME} > ${HOLO_INSTALL_DIR}/etc/hostname
echo "127.0.1.1    ${HOLOHOSTNAME}" >> ${HOLO_INSTALL_DIR}/etc/hosts

echo "\nInstalling bootloader..."
arch-chroot ${HOLO_INSTALL_DIR} bootctl install
mkentry "SteamOS, Patched mainline kernel" "handheld" > ${HOLO_INSTALL_DIR}/boot/loader/entries/01-handheld.conf
mkentry "SteamOS, Pure mainline kernel" "mainline" > ${HOLO_INSTALL_DIR}/boot/loader/entries/02-mainline.conf

# force max resolution to autorotate display
echo "timeout 3" > ${HOLO_INSTALL_DIR}/boot/loader/loader.conf
echo "console-mode auto" >> ${HOLO_INSTALL_DIR}/boot/loader/loader.conf
echo "default 01-handheld.conf" >> ${HOLO_INSTALL_DIR}/boot/loader/loader.conf

arch-chroot ${HOLO_INSTALL_DIR} systemctl enable NetworkManager systemd-timesyncd Rinputer3

echo "\nSetting up locale..."
echo "${SYSTEM_LOCALE}" >> ${HOLO_INSTALL_DIR}/etc/locale.gen
arch-chroot ${HOLO_INSTALL_DIR} locale-gen
echo "LANG=$(echo ${SYSTEM_LOCALE} | cut -d' ' -f1)" > ${HOLO_INSTALL_DIR}/etc/locale.conf	
echo "Installing full SteamOS 3..."
arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_UPDATE}
arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_INSTALL} holoiso-main holoiso-updateclient wireplumber vulkan-radeon vulkan-intel lib32-vulkan-radeon lib32-vulkan-intel holoiso/gamescope mesa lib32-mesa

echo "\nConfiguring Steam Deck UI by default..."
mkdir ${HOLO_INSTALL_DIR}/etc/sddm.conf.d
echo "[General]\nDisplayServer=wayland\n\n[Autologin]\nUser=${HOLOUSER}\nSession=gamescope-wayland.desktop" >> ${HOLO_INSTALL_DIR}/etc/sddm.conf.d/autologin.conf
mkdir ${HOLO_INSTALL_DIR}/home/${HOLOUSER}/Desktop
cp /etc/holoinstall/steamos-gamemode.desktop ${HOLO_INSTALL_DIR}/home/${HOLOUSER}/Desktop/steamos-gamemode.desktop
arch-chroot ${HOLO_INSTALL_DIR} chmod +x /home/${HOLOUSER}/Desktop/steamos-gamemode.desktop
arch-chroot ${HOLO_INSTALL_DIR} ln -s /usr/share/applications/steam.desktop /home/${HOLOUSER}/Desktop/steam.desktop
arch-chroot ${HOLO_INSTALL_DIR} chown -R ${HOLOUSER}:${HOLOUSER} /home/${HOLOUSER}/Desktop
arch-chroot ${HOLO_INSTALL_DIR} systemctl enable cups bluetooth sddm holoiso-reboot-tracker
arch-chroot ${HOLO_INSTALL_DIR} usermod -a -G rfkill ${HOLOUSER}
arch-chroot ${HOLO_INSTALL_DIR} usermod -a -G wheel ${HOLOUSER}
arch-chroot ${HOLO_INSTALL_DIR} sudo -u ${HOLOUSER} steam
arch-chroot ${HOLO_INSTALL_DIR} ${CMD_PACMAN_INSTALL} flatpak packagekit-qt5 rsync unzip vim
arch-chroot ${HOLO_INSTALL_DIR} flatpak remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo
arch-chroot ${HOLO_INSTALL_DIR} echo "recoveryinit" > /root/.bashrc

echo "Done!"
